express 安装：
    如果没有全局安装，则全局安装：cnpm install express --save

生成器工具 express：
    如果没有全局安装，则全局安装：cnpm install express-generator -g

项目中安装express生成器：   cd file
                            express myapp
                            cd myapp
                            cnpm install
                            cnpm install mongoose (如果操作mongodb)
                            set DEBUG=myapp & npm start  (启动本地应用)
                           （在浏览器中打开 http://localhost:3000/ 网址就可以看到这个应用了。）



添加页面（只需三步，1添加一个html文件，2添加三行代码，3添加一行代码。）
   ---如果按上面方法添加页面，每增一个页面，就需要在routes中添加一个对应js文件，那会晕掉。怎么办？解决方法如下：
   1，（views-V）例如我想添加一个bootstrap.html页面，首先在在views文件下，添加bootstrap.html页面，将html改成ejs就行了，即bootstrap.ejs。
   ---ejs和html内容格式一样的。
   2，（控制器-C，作用：承上启下，连接程序入口和页面）统一在routes下的index.js中配置页面的请求路由，也就是请求映射处理。只有在需要情况下，才新建新的路由文件，如何新建？看上边第一种方法。
   router.get('/bootstrap.html2', function(req, res, next) {
 res.render('bootstrap', { title: 'bootstrap' });
});
   //这里res.render('bootstrap'...对应的就是views中的bootstrap.ejs文件。
   //router.get('/bootstrap.html2...对应的是app.js中添加代码的名称
   3，app.js文件中，只需要添加一行代码即可，作用白话说就是程序入口关联控制器。
   app.use('/bootstrap.html2',routes);  //添加到app.use('/', routes);下边
   //routes就是var routes = require('./routes/index');，即关联routes下的index.js文件。这里bootstrap.html2和上边控制器中的bootstrap.html2是对应的，即对外客户访问的页面名称，可以随意写，返回的是bootstrap.ejs页面。



node.js  由哪几部分组成？

    1，引入required模块；
    2，创建服务器；
    3，接收请求与响应请求；

    var http = require('http');

    http.createServer(function(request,response){
        response.writeHead(200,{'Content-Type':'text/plain'});
        response.end('hello world\n');
    }).listen(9999);

    console.log('server running at http://127.0.0.1:9999');

    过程解析：
        1、第一行请求（require）Node.js 自带的 http 模块，并且把它赋值给 http 变量。
        2、接下来我们调用 http 模块提供的函数： createServer 。这个函数会返回 一个对象，这个对象有一个叫做 listen 的方法，这个方法有一个数值参数， 指定这个 HTTP 服务器监听的端口号。



版本号
    使用NPM下载和发布代码时都会接触到版本号。NPM使用语义版本号来管理代码，这里简单介绍一下。
    语义版本号分为X.Y.Z三位，分别代表主版本号、次版本号和补丁版本号。当代码变更时，版本号按以下原则更新。
    如果只是修复bug，需要更新Z位。
    如果是新增了功能，但是向下兼容，需要更新Y位。
    如果有大变动，向下不兼容，需要更新X位。
    版本号有了这个保证后，在申明第三方包依赖时，除了可依赖于一个固定版本号外，还可依赖于某个范围的版本号。例如"argv": "0.0.x"表示依赖于0.0.x系列的最新版argv。



Node 自带了交互式解释器，可以执行以下任务：
    读取 - 读取用户输入，解析输入了Javascript 数据结构并存储在内存中。
    执行 - 执行输入的数据结构
    打印 - 输出结果
    循环 - 循环操作以上步骤直到用户两次按下 ctrl-c 按钮退出。



node的REPL 命令（交互式解释器）
    ctrl + c - 退出当前终端。
    ctrl + c 按下两次 - 退出 Node REPL。
    ctrl + d - 退出 Node REPL.
    向上/向下 键 - 查看输入的历史命令
    tab 键 - 列出当前命令
    .help - 列出使用命令
    .break - 退出多行表达式
    .clear - 退出多行表达式
    .save filename - 保存当前的 Node REPL 会话到指定文件
    .load filename - 载入当前 Node REPL 会话的文件内容。


node读取文件
    同步：
        var fs = require('fs');
        var data = fs.readFileSync('input.txt');
    异步：
        var fs = require('fs');
        fs.readFile('input.txt',function(err,data){
            if (err) {
                return console.error(err.stack);
            };
            console.log(data.toString());
        })
    阻塞，是按顺序执行的，而非阻塞是不需要按顺序的，所以如果需要处理回调函数的参数，我们就需要写在回调函数内。




Node.js 是单进程-单线程应用程序，但是通过事件和回调支持并发，所以性能非常高；
Node.js 的每一个 API 都是异步的，并作为一个独立线程运行，使用异步函数调用，并处理并发。
Node.js 基本上所有的事件机制都是用设计模式中观察者模式实现。Node.js 单线程类似进入一个while(true)的事件循环，直到没有事件观察者退出，每个异步事件都生成一个事件观察者，如果有事件发生就调用该回调函数.




events 模块只提供了一个对象： events.EventEmitter。EventEmitter 的核心就是事件触发与事件监听器功能的封装。
    var events = require('events');
    var eventEmitter = new events.EventEmitter();
    EventEmitter 提供了多个属性，如 on 和 emit。on 函数用于绑定事件函数，emit 属性用于触发一个事件。


    EventEmitter 对象如果在实例化时发生错误，会触发 error 事件。当添加新的监听器时，newListener 事件会触发，当监听器被移除时，removeListener 事件被触发。

    1、addListener(event, listener)
        为指定事件添加一个监听器到监听器数组的尾部。

    2、on(event, listener)
        为指定事件注册一个监听器，接受一个字符串 event 和一个回调函数。
        server.on('connection', function (stream) {
          console.log('someone connected!');
        });
        (同一个事件可以注册多个监听器)

    3、once(event, listener)
        为指定事件注册一个单次监听器，即 监听器最多只会触发一次，触发后立刻解除该监听器。
        server.once('connection', function (stream) {
          console.log('Ah, we have our first user!');
        });

    4、removeListener(event, listener)
        移除指定事件的某个监听器，监听器必须是该事件已经注册过的监听器。
        它接受两个参数，第一个是事件名称，第二个是回调函数名称。
        var callback = function(stream) {
          console.log('someone connected!');
        };
        server.on('connection', callback);
        // ...
        server.removeListener('connection', callback);

    5、removeAllListeners([event])
        移除所有事件的所有监听器， 如果指定事件，则移除指定事件的所有监听器。

    6、setMaxListeners(n)
        默认情况下， EventEmitters 如果你添加的监听器超过 10 个就会输出警告信息。 setMaxListeners 函数用于提高监听器的默认限制的数量。

    7、listeners(event)
        返回指定事件的监听器数组。

    8、emit(event, [arg1], [arg2], [...])
        按参数的顺序执行每个监听器，如果事件有注册监听返回 true，否则返回 false。

    9、listenerCount(emitter, event)
        返回指定事件的监听器数量。


    error 事件
        EventEmitter 定义了一个特殊的事件 error，它包含了错误的语义，我们在遇到 异常的时候通常会触发 error 事件。
        当 error 被触发时，EventEmitter 规定如果没有响 应的监听器，Node.js 会把它当作异常，退出程序并输出错误信息。
        我们一般要为会触发 error 事件的对象设置监听器，避免遇到错误后整个程序崩溃。例如：
            var events = require('events');
            var emitter = new events.EventEmitter();
            emitter.emit('error');


    继承 EventEmitter
        大多数时候我们不会直接使用 EventEmitter，而是在对象中继承它。包括 fs、net、 http 在内的，只要是支持事件响应的核心模块都是 EventEmitter 的子类。




Buffer(缓冲区)
    JavaScript 语言自身只有字符串数据类型，没有二进制数据类型。
    但在处理像TCP流或文件流时，必须使用到二进制数据。因此在 Node.js中，定义了一个 Buffer 类，该类用来创建一个专门存放二进制数据的缓存区。
    在 Node.js 中，Buffer 类是随 Node 内核一起发布的核心库。Buffer 库为 Node.js 带来了一种存储原始数据的方法，可以让 Node.js 处理二进制数据，每当需要在 Node.js 中处理I/O操作中移动的数据时，就有可能使用 Buffer 库。原始数据存储在 Buffer 类的实例中。一个 Buffer 类似于一个整数数组，但它对应于 V8 堆内存之外的一块原始内存。

    创建 Buffer 类
        创建长度为 10 字节的 Buffer 实例：var buf = new Buffer(10);
        通过给定的数组创建 Buffer 实例：var buf = new Buffer([10, 20, 30, 40, 50]);
        通过一个字符串来创建 Buffer 实例：var buf = new Buffer("www.runoob.com", "utf-8");
        //(utf-8 是默认的编码方式，此外它同样支持以下编码："ascii", "utf8", "utf16le", "ucs2", "base64" 和 "hex"。)


    写入缓冲区:buf.write(string[, offset[, length]][, encoding])
        注意:返回实际写入的大小。如果 buffer 空间不足， 则只会写入部分字符串。

    从缓冲区读取数据:buf.toString([encoding[, start[, end]]])
        注意:解码缓冲区数据并使用指定的编码返回字符串。
        buf = new Buffer(26);
        for (var i = 0 ; i < 26 ; i++) {
          buf[i] = i + 97;
        }
        console.log( buf.toString('ascii'));       // 输出: abcdefghijklmnopqrstuvwxyz
        console.log( buf.toString('ascii',0,5));   // 输出: abcde
        console.log( buf.toString('utf8',0,5));    // 输出: abcde
        console.log( buf.toString(undefined,0,5)); // 使用 'utf8' 编码, 并输出: abcde

    将 Buffer 转换为 JSON 对象:buf.toJSON()

    缓冲区合并:Buffer.concat(list[, totalLength])

    缓冲区比较:buf.compare(otherBuffer);

    拷贝缓冲区:buf.copy(targetBuffer[, targetStart[, sourceStart[, sourceEnd]]])

    缓冲区裁剪:buf.slice([start[, end]])

    缓冲区长度:buf.length;

    缓冲区填充:buf.fill(value[, offset][, end])
        使用指定的 value 来填充这个 buffer。如果没有指定 offset (默认是 0) 并且 end (默认是 buffer.length) ，将会填充整个buffer。





Stream(流)
    Stream 是一个抽象接口，Node 中有很多对象实现了这个接口。例如，对http 服务器发起请求的request 对象就是一个 Stream，还有stdout（标准输出）。
    Stream 有四种流类型：
        Readable - 可读操作。
        Writable - 可写操作。
        Duplex - 可读可写操作.
        Transform - 操作被写入数据，然后读出结果。
    所有的 Stream 对象都是 EventEmitter 的实例。常用的事件有：
        data - 当有数据可读时触发。
        end  - 没有更多的数据可读时触发。
        error - 在接收和写入过程中发生错误时触发。
        finish - 所有数据已被写入到底层系统时触发。

    从流中读取数据:
        var fs = require("fs");
        var data = '';
        // 创建可读流
        var readerStream = fs.createReadStream('input.txt');
        // 设置编码为 utf8。
        readerStream.setEncoding('UTF8');
        // 处理流事件 --> data, end, and error
        readerStream.on('data', function(chunk) {
           data += chunk;
        });
        readerStream.on('end',function(){
           console.log(data);
        });
        readerStream.on('error', function(err){
           console.log(err.stack);
        });
        console.log("程序执行完毕");

    写入流:
        var fs = require("fs");
        var data = '菜鸟教程官网地址：www.runoob.com';
        // 创建一个可以写入的流，写入到文件 output.txt 中
        var writerStream = fs.createWriteStream('output.txt');
        // 使用 utf8 编码写入数据
        writerStream.write(data,'UTF8');
        // 标记文件末尾
        writerStream.end();
        // 处理流事件 --> data, end, and error
        writerStream.on('finish', function() {
            console.log("写入完成。");
        });
        writerStream.on('error', function(err){
           console.log(err.stack);
        });
        console.log("程序执行完毕");


    管道流:
        管道提供了一个输出流到输入流的机制。通常我们用于从一个流中获取数据并将数据传递到另外一个流中。
        var fs = require("fs");
        // 创建一个可读流
        var readerStream = fs.createReadStream('input.txt');
        // 创建一个可写流
        var writerStream = fs.createWriteStream('output.txt');
        // 管道读写操作
        // 读取 input.txt 文件内容，并将内容写入到 output.txt 文件中
        readerStream.pipe(writerStream);
        console.log("程序执行完毕");


    链式流：
        链式是通过连接输出流到另外一个流并创建多个对个流操作链的机制。链式流一般用于管道操作。
        用管道和链式来压缩和解压文件：
        var fs = require("fs");
        var zlib = require('zlib');
        // 压缩 input.txt 文件为 input.txt.gz
        fs.createReadStream('input.txt')
          .pipe(zlib.createGzip())
          .pipe(fs.createWriteStream('input.txt.gz'));
        console.log("文件压缩完成。");

        var fs = require("fs");
        var zlib = require('zlib');
        // 解压 input.txt.gz 文件为 input.txt
        fs.createReadStream('input.txt.gz')
          .pipe(zlib.createGunzip())
          .pipe(fs.createWriteStream('input.txt'));
        console.log("文件解压完成。");




模块系统
    为了让Node.js的文件可以相互调用，Node.js提供了一个简单的模块系统。
    一个 Node.js 文件就是一个模块，这个文件可能是JavaScript 代码、JSON 或者编译过的C/C++ 扩展。

    Node.js 提供了 exports 和 require 两个对象，其中 exports 是模块公开的接口，require 用于从外部获取一个模块的接口，即所获取模块的 exports 对象。

    创建一个模块非常简单：
    //hello.js
    function Hello() {
        var name;
        this.setName = function(thyName) {
            name = thyName;
        };
        this.sayHello = function() {
            console.log('Hello ' + name);
        };
    };
    module.exports = Hello;


    直接获得这个对象：
    //main.js
    var Hello = require('./hello');
    hello = new Hello();
    hello.setName('BYVoid');
    hello.sayHello();




路由



全局对象
    JavaScript 中有一个特殊的对象，称为全局对象（Global Object），它及其所有属性都可以在程序的任何地方访问，即全局变量。
    在浏览器 JavaScript 中，通常 window 是全局对象， 而 Node.js 中的全局对象是 global，所有全局变量（除了 global 本身以外）都是 global 对象的属性。
    在 Node.js 我们可以直接访问到 global 的属性，而不需要在应用中包含它。

    global 最根本的作用是作为全局变量的宿主。

    按照 ECMAScript 的定义，满足以下条 件的变量是全局变量：
        在最外层定义的变量；
        全局对象的属性；
        隐式定义的变量（未定义直接赋值的变量）。

    当你定义一个全局变量时，这个变量同时也会成为全局对象的属性，反之亦然。

    注意： 在 Node.js 中你不可能在最外层定义变量，因为所有用户代码都是属于当前模块的， 而模块本身不是最外层上下文。
    注意： 永远使用 var 定义变量以避免引入全局变量，因为全局变量会污染 命名空间，提高代码的耦合风险。

    __filename:
        它将输出文件所在位置的绝对路径，且和命令行参数所指定的文件名不一定相同。 如果在模块中，返回的值是模块文件的路径。


    __dirname:
        表示当前执行脚本所在的目录。


    setTimeout(fn,ms)
    clearTimeout(t)
    setInterval(fn, ms)



    console:
        console.log([data][, ...]):如果只有一个参数，则输出这个参数的字符串形式。如果有多个参数，则 以类似于C 语言 printf() 命令的格式输出。(console.log('byvoid%diovyb', 1991)===>byvoid1991iovyb )

        console.info([data][, ...]):该命令的作用是返回信息性消息，这个命令与console.log差别并不大，除了在chrome中只会输出文字外，其余的会显示一个蓝色的惊叹号。

        console.error([data][, ...]):输出错误消息的。控制台在出现错误时会显示是红色的叉子。

        console.warn([data][, ...]):输出警告消息。控制台出现有黄色的惊叹号。

        console.dir(obj[, options]):用来对一个对象进行检查（inspect），并以易于阅读和打印的格式显示。

        console.time(label):输出时间，表示计时开始。

        console.timeEnd(label):结束时间，表示计时结束。

        console.trace(message[, ...]):当前执行的代码在堆栈中的调用路径，这个测试函数运行很有帮助，只要给想测试的函数里面加入 console.trace 就行了。

        console.assert(value[, message][, ...]):用于判断某个表达式或变量是否为真，接收两个参数，第一个参数是表达式，第二个参数是字符串。只有当第一个参数为false，才会输出第二个参数，否则不会有任何结果。




process
    它用于描述当前Node.js 进程状态的对象，提供了一个与操作系统的简单接口。通常在你写本地命令行程序的时候，少不了要 和它打交道。

    process 对象的一些最常用的成员方法事件。
        exit 事件：当进程准备退出时触发。
        beforeExit 事件：当 node 清空事件循环，并且没有其他安排时触发这个事件。通常来说，当没有进程安排时 node 退出，但是 'beforeExit' 的监听器可以异步调用，这样 node 就会继续执行。
        uncaughtException 事件：当一个异常冒泡回到事件循环，触发这个事件。如果给异常添加了监视器，默认的操作（打印堆栈跟踪信息并退出）就不会发生。
        Signal 事件：当进程接收到信号时就触发。信号列表详见标准的 POSIX 信号名，如 SIGINT、SIGUSR1 等。

        示例：
        process.on('exit', function(code) {
          // 以下代码永远不会执行
          setTimeout(function() {
            console.log("该代码不会执行");
          }, 0);
          console.log('退出码为:', code);
        });
        console.log("程序执行结束");

    Process 属性:
        stdout:标准输出流。
        stderr:标准错误流。
        stdin:标准输入流。
        argv:返回一个数组，由命令行执行脚本时的各个参数组成。它的第一个成员总是node，第二个成员是脚本文件名，其余成员是脚本文件的参数。
        platform:运行程序所在的平台系统 'darwin', 'freebsd', 'linux', 'sunos' 或 'win32'
        arch:当前 CPU 的架构：'arm'、'ia32' 或者 'x64'。
        pid:当前进程的进程号。
        config:一个包含用来编译当前 node 执行文件的 javascript 配置选项的对象。它与运行 ./configure 脚本生成的 "config.gypi" 文件相同。
        versions:一个属性，包含了 node 的版本和依赖.
        version:Node 的版本，比如v0.10.18。
        exitCode:进程退出时的代码，如果进程优通过 process.exit() 退出，不需要指定退出码。
        env:返回一个对象，成员为当前 shell 的环境变量
        execPath:返回执行当前脚本的 Node 二进制文件的绝对路径。
        execArgv:返回一个数组，成员是命令行下执行脚本时，在Node可执行文件与脚本文件之间的命令行参数。


      Process 方法:
        abort()：这将导致 node 触发 abort 事件。会让 node 退出并生成一个核心文件。
        cwd()：返回当前进程的工作目录
        ……




常用工具

        util
            util：是一个Node.js 核心模块，提供常用函数的集合，用于弥补核心JavaScript 的功能 过于精简的不足。


        util.inherits：
            util.inherits(constructor, superConstructor):是一个实现对象间'原型继承'的函数。
            注意：constructor仅仅继承了superConstructor在原型中定义的函数，而构造函数内部创造的属性和函数都没有被constructor继承。



        util.inspect:
            util.inspect(object,[showHidden],[depth],[colors]):是一个将任意对象转换 为'字符串'的方法，通常用于调试和错误输出。它至少接受一个参数 object，即要转换的对象。
                showHidden 是一个可选参数，如果值为 true，将会输出更多隐藏信息。
                depth 表示最大递归的层数，如果对象很复杂，你可以指定层数以控制输出信息的多 少。如果不指定depth，默认会递归2层，指定为 null 表示将不限递归层数完整遍历对象。 如果color 值为 true，输出格式将会以ANSI 颜色编码，通常用于在终端显示更漂亮 的效果。
                注意：util.inspect 并不会简单地直接把对象转换为字符串，即使该对 象定义了toString 方法也不会调用。



        util.isArray(object):如果给定的参数 "object" 是一个数组返回true，否则返回false。


        util.isRegExp(object):如果给定的参数 "object" 是一个正则表达式返回true，否则返回false。


        util.isDate(object):如果给定的参数 "object" 是一个日期返回true，否则返回false。


        util.isError(object):如果给定的参数 "object" 是一个错误对象返回true，否则返回false。





文件系统
    Node.js 提供一组类似 UNIX（POSIX）标准的文件操作API。

    fs:文件系统模块
        Node.js 文件系统（fs 模块）模块中的方法均有异步和同步版本，例如读取文件内容的函数有异步的 fs.readFile() 和同步的 fs.readFileSync()。
        异步的方法函数最后一个参数为回调函数，回调函数的第一个参数包含了错误信息(error)。
        建议大家是用异步方法，比起同步，异步方法性能更高，速度更快，而且没有阻塞。


        fs.open(path, flags[, mode], callback):
            功能：异步模式下打开文件；

            参数使用说明如下：
                path - 文件的路径。
                flags - 文件打开的行为。具体值详见下文。
                mode - 设置文件模式(权限)，文件创建默认权限为 0666(可读，可写)。
                callback - 回调函数，带有两个参数如：callback(err, fd)。

            flags 参数可以是以下值：
                r   以读取模式打开文件。如果文件不存在抛出异常。
                r+  以读写模式打开文件。如果文件不存在抛出异常。
                rs  以同步的方式读取文件。
                rs+ 以同步的方式读取和写入文件。
                w   以写入模式打开文件，如果文件不存在则创建。
                wx  类似 'w'，但是如果文件路径存在，则文件写入失败。
                w+  以读写模式打开文件，如果文件不存在则创建。
                wx+ 类似 'w+'， 但是如果文件路径存在，则文件读写失败。
                a   以追加模式打开文件，如果文件不存在则创建。
                ax  类似 'a'， 但是如果文件路径存在，则文件追加失败。
                a+  以读取追加模式打开文件，如果文件不存在则创建。
                ax+ 类似 'a+'， 但是如果文件路径存在，则文件读取追加失败。



        fs.stat(path, callback)
            功能：异步模式获取文件信息

            参数使用说明如下：
                path - 文件路径。
                callback - 回调函数，带有两个参数如：(err, stats), stats 是 fs.Stats 对象。

            fs.stat(path)执行后，会将stats类的实例返回给其回调函数。可以通过stats类中的提供方法判断文件的相关属性。

            stats类中的方法有：
                stats.isFile()  如果是文件返回 true，否则返回 false。
                stats.isDirectory() 如果是目录返回 true，否则返回 false。
                stats.isBlockDevice()   如果是块设备返回 true，否则返回 false。
                stats.isCharacterDevice()   如果是字符设备返回 true，否则返回 false。
                stats.isSymbolicLink()  如果是软链接返回 true，否则返回 false。
                stats.isFIFO()  如果是FIFO，返回true，否则返回 false。FIFO是UNIX中的一种特殊类型的命令管道。
                stats.isSocket()    如果是 Socket 返回 true，否则返回 false。


        fs.writeFile(file, data[, options], callback)
            功能：异步模式下写入文件(如果文件存在，该方法写入的内容会覆盖旧的文件内容。)

            参数使用说明如下：
                file - 文件名或文件描述符。
                data - 要写入文件的数据，可以是 String(字符串) 或 Buffer(流) 对象。
                options - 该参数是一个对象，包含 {encoding, mode, flag}。默认编码为 utf8, 模式为 0666 ， flag 为 'w'
                callback - 回调函数，回调函数只包含错误信息参数(err)，在写入失败时返回。




        fs.read(fd, buffer, offset, length, position, callback)
            功能：异步模式下读取文件(该方法使用了文件描述符来读取文件。)

            参数使用说明如下：
                fd - 通过 fs.open() 方法返回的文件描述符。
                buffer - 数据写入的缓冲区。
                offset - 缓冲区写入的写入偏移量。
                length - 要从文件中读取的字节数。
                position - 文件读取的起始位置，如果 position 的值为 null，则会从当前文件指针的位置读取。
                callback - 回调函数，有三个参数err, bytesRead, buffer，err 为错误信息， bytesRead 表示读取的字节数，buffer 为缓冲区对象。



        fs.close(fd, callback)
            功能：异步模式下关闭文件(该方法使用了文件描述符来读取文件。)

            参数使用说明如下：
                fd - 通过 fs.open() 方法返回的文件描述符。
                callback - 回调函数，没有参数。




        fs.ftruncate(fd, len, callback)
            功能：异步模式下截取文件(该方法使用了文件描述符来读取文件)

            参数使用说明如下：
                fd - 通过 fs.open() 方法返回的文件描述符。
                len - 文件内容截取的长度。
                callback - 回调函数，没有参数。





        fs.unlink(path, callback)
            功能：删除文件

            参数使用说明如下：
                path - 文件路径。
                callback - 回调函数，没有参数。



        fs.mkdir(path[, mode], callback)
            功能：创建目录

            参数使用说明如下：
                path - 文件路径。
                mode - 设置目录权限，默认为 0777。
                callback - 回调函数，没有参数



        fs.readdir(path, callback)
            功能：读取目录

            参数使用说明如下：
                path - 文件路径。
                callback - 回调函数，回调函数带有两个参数err, files，err 为错误信息，files 为 目录下的文件数组列表。


        fs.rmdir(path, callback)
            功能：删除目录

            参数使用说明如下：
                path - 文件路径。
                callback - 回调函数，没有参数。




GET/POST请求



Web 模块

    什么是 Web 服务器？
        Web服务器一般指网站服务器，是指驻留于因特网上某种类型计算机的程序，Web服务器的基本功能就是提供Web信息浏览服务。它只需支持HTTP协议、HTML文档格式及URL，与客户端的网络浏览器配合。
        大多数 web 服务器都支持服务端的脚本语言（php、python、ruby）等，并通过脚本语言从数据库获取数据，将结果返回给客户端浏览器。
        目前最主流的三个Web服务器是Apache、Nginx、IIS。


        Client - 客户端，一般指浏览器，浏览器可以通过 HTTP 协议向服务器请求数据。
        Server - 服务端，一般指 Web 服务器，可以接收客户端请求，并向客户端发送响应数据。
        Business - 业务层， 通过 Web 服务器处理应用程序，如与数据库交互，逻辑运算，调用外部程序等。
        Data - 数据层，一般由数据库组成。



        第一步：使用 Node 创建 Web 服务器：
            Node.js 提供了 http 模块，http 模块主要用于搭建 HTTP 服务端和客户端，使用 HTTP 服务器或客户端功能必须调用 http 模块，代码如下：
            var http = require('http');

            以下演示一个最基本的 HTTP 服务器架构，代码如下：
                var http = require('http');
                var fs = require('fs');
                var url = require('url');
                // 创建服务器
                http.createServer( function (request, response) {
                   // 解析请求，包括文件名
                   var pathname = url.parse(request.url).pathname;
                   // 输出请求的文件名
                   console.log("Request for " + pathname + " received.");
                   // 从文件系统中读取请求的文件内容
                   fs.readFile(pathname.substr(1), function (err, data) {
                      if (err) {
                         console.log(err);
                         // HTTP 状态码: 404 : NOT FOUND
                         // Content Type: text/plain
                         response.writeHead(404, {'Content-Type': 'text/html'});
                      }else{
                         // HTTP 状态码: 200 : OK
                         // Content Type: text/plain
                         response.writeHead(200, {'Content-Type': 'text/html'});
                         // 响应文件内容
                         response.write(data.toString());
                      }
                      //  发送响应数据
                      response.end();
                   });
                }).listen(8081);
                // 控制台会输出以下信息
                console.log('Server running at http://127.0.0.1:8081/');

            index.html 文件:
                <html>
                    <head>
                        <title>Sample Page</title>
                    </head>
                    <body>
                        Hello World!
                    </body>
                </html>


                控制台执行 server.js
                接着我们在浏览器中打开地址：http://127.0.0.1:8081/index.html
                输出：Hello World!



        第二步：使用 Node 创建 Web 客户端:
            var http = require('http');

            // 用于请求的选项
            var options = {
               host: 'localhost',
               port: '8081',
               path: '/index.htm'
            };

            // 处理响应的回调函数
            var callback = function(response){
               // 不断更新数据
               var body = '';
               response.on('data', function(data) {
                  body += data;
               });

               response.on('end', function() {
                  // 数据接收完成
                  console.log(body);
               });
            }
            // 向服务端发送请求
            var req = http.request(options, callback);
            req.end();


            控制台执行 client.js
            输出：server.html页面



RESTful API
    什么是 REST？
        REST即表述性状态传递:是一种软件架构风格。
        表述性状态转移是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是RESTful。
        需要注意的是，REST是设计风格而不是标准。REST通常基于使用HTTP，URI，和XML（标准通用标记语言下的一个子集）以及HTML（标准通用标记语言下的一个应用）这些现有的广泛流行的协议和标准。
        REST 通常使用 JSON 数据格式。


    REST 基本架构的四个方法：
        GET - 用于获取数据。
        PUT - 用于更新或添加数据。
        DELETE - 用于删除数据。
        POST - 用于添加数据。



    RESTful Web Services
        Web service是一个平台独立的，低耦合的，自包含的、基于可编程的web的应用程序，可使用开放的XML标准来描述、发布、发现、协调和配置这些应用程序，用于开发分布式的互操作的应用程序。
        基于 REST 架构的 Web Services 即是 RESTful。
        RESTful Web 服务通常可以通过自动客户端或代表用户的应用程序访问。但是，这种服务的简便性让用户能够与之直接交互，使用它们的 Web 浏览器构建一个 GET URL 并读取返回的内容。




Node.js 多进程
        我们都知道 Node.js 是以单线程的模式运行的，但它使用的是事件驱动来处理并发，这样有助于我们在多核 cpu 的系统上创建多个子进程，从而提高性能。
        每个子进程总是带有三个流对象：child.stdin, child.stdout 和child.stderr。他们可能会共享父进程的 stdio 流，或者也可以是独立的被导流的流对象。

    Node 提供了 child_process 模块来创建子进程，方法有：
        exec - child_process.exec 使用子进程执行命令，缓存子进程的输出，并将子进程的输出以回调函数参数的形式返回。
        spawn - child_process.spawn 使用指定的命令行参数创建新进程。
        fork - child_process.fork 是 spawn()的特殊形式，用于在子进程中运行的模块，如 fork('./son.js') 相当于 spawn('node', ['./son.js']) 。与spawn方法不同的是，fork会在父进程与子进程之间，建立一个通信管道，用于进程之间的通信。




JXcore 打包
    JXcore 是一个支持多线程的 Node.js 发行版本，基本不需要对你现有的代码做任何改动就可以直接线程安全地以多线程运行。
