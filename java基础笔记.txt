java中局部变量和成员变量的区别：
    1、作用域不同
         成员变量的作用域在整个类内部都是可见，可用的；
         局部变量的作用域仅限于定义它的方法，不能被其它方法调用；

    2、初始值不同
        成员变量初始值为0；
        局部变量没有初始值，必须自己赋值；

    3、在同一个方法中，不允许有同名局部变量；
        在不同的方法中，可以有同名的局部变量；

    4、成员变量和局部变量同名时，局部变量的赋值具有更高的优先级，优先取局部变量的值；



构造函数：
    作用：用于给对象进行初始化，是给与之对应的对象进行初始化，它具有针对性，函数中的一种。

    特点：
        1. 该函数的名称和所在类的名称相同。
        2. 不需要定义返回值类型。
        3. 该函数没有具体的返回值。

    记住：
        所有对象创建时，都需要初始化才可以使用。

    注意事项：
        1：一个类在定义时，如果没有定义过构造函数，那么该类中会自动生成一个空参数的构造函数，为了方便该类创建对象，完成初始化。如果在类中自定义了构造函数，那么默认的构造函数就没有了。
        2：一个类中，可以有多个构造函数，因为它们的函数名称都相同，所以只能通过参数列表来区分。所以，一个类中如果出现多个构造函数。它们的存在是以重载体现的。

    构造函数和一般函数有什么区别呢？
        1：两个函数定义格式不同。
        2：构造函数是在对象创建时，就被调用，用于初始化，而且初始化动作只执行一次。一般函数，是对象创建后，需要调用才执行，可以被调用多次。




static：
    static代表着什么：
        在Java中并不存在全局变量的概念，但是我们可以通过static来实现一个“伪全局”的概念，在Java中static表示“全局”或者“静态”的意思，用来修饰成员变量和成员方法，当然也可以修饰代码块。

        Java把内存分为栈内存和堆内存，其中栈内存用来存放一些基本类型的变量、数组和对象的引用，堆内存主要存放一些对象。在JVM加载一个类的时候，若该类存在static修饰的成员变量和成员方法，则会为这些成员变量和成员方法在固定的位置开辟一个固定大小的内存区域，有了这些“固定”的特性，那么JVM就可以非常方便地访问他们。同时如果静态的成员变量和成员方法不出作用域的话，它们的句柄都会保持不变。同时static所蕴含“静态”的概念表示着它是不可恢复的，即在那个地方，你修改了，他是不会变回原样的，你清理了，他就不会回来了。

        同时被static修饰的成员变量和成员方法是独立于该类的，它不依赖于某个特定的实例变量，也就是说它被该类的所有实例共享。所有实例的引用都指向同一个地方，任何一个实例对其的修改都会导致其他实例的变化。


     怎么使用static：
        static可以用于修饰成员变量和成员方法，我们将其称之为静态变量和静态方法，直接通过类名来进行访问。
            ClassName.propertyName
            ClassName.methodName(……)

        Static修饰的代码块表示静态代码块，当JVM装载类的时候，就会执行这块代码，其用处非常大。（对于代码块的使用这几天介绍，敬请关注）


    static修饰的变量：
        static修饰的变量我们称之为静态变量，没有用static修饰的变量称之为实例变量，他们两者的区别是：
            静态变量是随着类加载时被完成初始化的，它在内存中仅有一个，且JVM也只会为它分配一次内存，同时类所有的实例都共享静态变量，可以直接通过类名来访问它。
            但是实例变量则不同，它是伴随着实例的，每创建一个实例就会产生一个实例变量，它与该实例同生共死。
            所以我们一般在这两种情况下使用静态变量：对象之间共享数据、访问方便。


    static方法：
        static修饰的方法我们称之为静态方法，我们通过类名对其进行直接调用。由于他在类加载的时候就存在了，它不依赖于任何实例，所以static方法必须实现，也就是说他不能是抽象方法abstract。
        Static方法是类中的一种特殊方法，我们只有在真正需要他们的时候才会将方法声明为static。如Math类的所有方法都是静态static的。


    static代码块：
        被static修饰的代码块，我们称之为静态代码块，静态代码块会随着类的加载一块执行，而且他可以随意放，可以存在于该了的任何地方。
        静态初始化块只会执行“一次”，同时静态初始化块只能给静态变量赋值，不能初始化普通的成员变量。


    Static的局限：
        Static确实是存在诸多的作用，但是它也存在一些缺陷。
        1、它只能调用static变量。
        2、它只能调用static方法。
        3、不能以任何形式引用this、super。
        4、static变量在定义时必须要进行初始化，且初始化时间要早于非静态变量。
        总结：无论是变量，方法，还是代码块，只要用static修饰，就是在类被加载时就已经”准备好了”,也就是可以被使用或者已经被执行，都可以脱离对象而执行。反之，如果没有static，则必须要依赖于对象实例。


    静态方法中调用非静态变量和非静态方法：
        只能在静态方法中，采用类名调非静态变量和非静态方法的方式调用；